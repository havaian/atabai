version: '3.8'

services:
  # # MongoDB Database
  # mongodb:
  #   image: mongo:7.0-jammy
  #   container_name: ${PROJECT_NAME:-atabai}-mongodb
  #   restart: unless-stopped
  #   environment:
  #     MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-aitable}
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
  #   volumes:
  #     - mongodb_data:/data/db
  #     - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
  #   ports:
  #     - "${MONGODB_EXPOSE:-127.0.0.1:27017}:27017"
  #   networks:
  #     - atabai-network
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   profiles: ["dev"]

  # # Redis Cache
  # redis:
  #   image: redis:7.2-alpine
  #   container_name: ${PROJECT_NAME:-atabai}-redis
  #   restart: unless-stopped
  #   command: redis-server --requirepass ${REDIS_PASSWORD:-password} --appendonly yes --port ${REDIS_EXPOSE}
  #   volumes:
  #     - redis_data:/data
  #   ports:
  #     - "${REDIS_EXPOSE:-127.0.0.1:6379}:6379"
  #   networks:
  #     - atabai-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # # Backend API Server
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #     target: production
  #   container_name: ${PROJECT_NAME:-atabai}-backend
  #   restart: unless-stopped
  #   environment:
  #     - NODE_ENV=${NODE_ENV:-production}
  #     - PORT=${BACKEND_PORT:-3000}
  #     - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGO_DATABASE:-aitable}?authSource=admin
  #     - REDIS_URI=redis://:${REDIS_PASSWORD:-password}@redis:6379
  #     - RABBITMQ_URI=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-password}@rabbitmq:5672
  #     - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
  #     - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
  #     - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
  #     - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
  #     - FRONTEND_URL=${FRONTEND_URL:-http://localhost:8080}
  #   volumes:
  #     - ./uploads:/app/uploads
  #     - ./logs:/app/logs
  #   ports:
  #     - "${BACKEND_EXPOSE:-127.0.0.1:3000}:3000"
  #   # depends_on:
  #   #   mongodb:
  #   #     condition: service_healthy
  #   #   redis:
  #   #     condition: service_healthy
  #   #   rabbitmq:
  #   #     condition: service_healthy
  #   networks:
  #     - atabai-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

  # # Frontend Development Server
  # frontend-dev:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #     target: development
  #   container_name: ${PROJECT_NAME:-atabai}-frontend-dev
  #   restart: unless-stopped
  #   environment:
  #     - NODE_ENV=development
  #     - VITE_API_BASE_URL=http://localhost:${BACKEND_PORT:-3000}/api
  #     - VITE_APP_TITLE=${VUE_APP_TITLE:-ATABAI}
  #     - VITE_APP_DESCRIPTION=${VUE_APP_DESCRIPTION:-Excel Automation Platform}
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   ports:
  #     - "${FRONTEND_EXPOSE:-127.0.0.1:8080}:8080"
  #   depends_on:
  #     - backend
  #   networks:
  #     - atabai-network
  #   profiles: ["dev"]

  # Frontend Production Server
  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: ${PROJECT_NAME:-atabai}-frontend-prod
    restart: unless-stopped
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${FRONTEND_PROD_EXPOSE:-127.0.0.1:80}:80"
    # depends_on:
    #   - backend
    networks:
      - atabai-network
    # profiles: ["prod"]

  # # Prometheus Monitoring
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: ${PROJECT_NAME:-atabai}-prometheus
  #   restart: unless-stopped
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   ports:
  #     - "${PROMETHEUS_EXPOSE:-127.0.0.1:9090}:9090"
  #   networks:
  #     - atabai-network
  #   profiles: ["monitoring"]

  # # Grafana Dashboard
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: ${PROJECT_NAME:-atabai}-grafana
  #   restart: unless-stopped
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning:/etc/grafana/provisioning:ro
  #   ports:
  #     - "${GRAFANA_EXPOSE:-127.0.0.1:3001}:3000"
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - atabai-network
  #   profiles: ["monitoring"]

# volumes:
#   mongodb_data:
#     driver: local
#   redis_data:
#     driver: local
#   rabbitmq_data:
#     driver: local
#   prometheus_data:
#     driver: local
#   grafana_data:
#     driver: local

networks:
  atabai-network:
    driver: bridge